;;  ██    ██  █████  ██████  ██  █████  ██████  ██      ███████ ███████ 
;;  ██    ██ ██   ██ ██   ██ ██ ██   ██ ██   ██ ██      ██      ██      
;;  ██    ██ ███████ ██████  ██ ███████ ██████  ██      █████   ███████ 
;;   ██  ██  ██   ██ ██   ██ ██ ██   ██ ██   ██ ██      ██           ██ 
;;    ████   ██   ██ ██   ██ ██ ██   ██ ██████  ███████ ███████ ███████ 

;;  Player vars 
(defpoll music-artist :interval "1s"  "playerctl metadata --format '{{ artist }}'")
(defpoll music-album :interval "1s"  "playerctl metadata --format '{{ album }}'")
(defpoll music-title :interval "1s"  "playerctl metadata --format '{{ title }}'")
(defpoll musicstat :interval "1s"  "if [ \"$(playerctl status)\" == Playing ]; then printf \"\"; else printf \"\"; fi")
(defpoll music-art :interval "3s"  "playerctl metadata mpris:artUrl | sed -e 's/open.spotify.com/i.scdn.co/g'")

;;  Weather vars 
(defpoll weather-data :interval "10m"  "~/.config/eww/scripts/getweather.bash")

;;  Vol vars 
(defpoll current-vol :interval "1s"  "amixer get Master | grep % | awk '{print $5}'| sed 's/[^0-9]//g' | tail -1")
(defpoll mute-status :interval "1s"  "amixer get Master | tail -2 | grep -c '\[on\]'")
(defpoll mutestat :interval "1s"  "~/.config/eww/scripts/get_mute_status.sh")

;;  Bright vars 
(defpoll current-bright :interval "1s"  "xbacklight -get | cut -d . -f 1")

;;  Calendar vars
(defpoll current-year :interval "1m" "date +'%Y'")
(defpoll current-month :interval "1m" "$(($(date +'%-m')-1))")
(defpoll current-day :interval "1m" "date +'%d'")


;;  ██     ██ ██ ██████   ██████  ███████ ████████ ███████ 
;;  ██     ██ ██ ██   ██ ██       ██         ██    ██      
;;  ██  █  ██ ██ ██   ██ ██   ███ █████      ██    ███████ 
;;  ██ ███ ██ ██ ██   ██ ██    ██ ██         ██         ██ 
;;   ███ ███  ██ ██████   ██████  ███████    ██    ███████

(defwidget cal [month year day]
  (box :class "border-box extra-bottom-margin"
    (calendar :halign "center" :valign "center" :class "cal" :month month :year year :day day)
  )
)

(defwidget player [art title album artist music-status] 
  (box :orientation "horizontal" :space-evenly "false" :class "border-box"
    (box :class "musicart" :halign "center" :valign "center" :style "background-image: url('${art}');")
    (box :orientation "vertical" :class "music-info" :valign "center" :space-evenly "false"
      (label :class "musictitle" :limit-width "20" :halign "center" :text title)
      (label :class "musicalbum" :limit-width "22" :halign "center" :text album)
      (label :class "musicartist" :limit-width "22" :halign "center" :text artist)
      (box :orientation "h" :halign "center" :valign "center" :class "musicbtn" :space-evenly "false" 
        (button :onclick "playerctl previous" "")
        (button :onclick "playerctl play-pause" music-status)
        (button :onclick "playerctl next" ""))
    )
  )
)
(defwidget weather [icon icon_color temp stat quote] 
  (box :orientation "h" :space-evenly "false" :class "border-box" 
    (box :class "weather-icon-side" :style {'color: ' + icon_color} icon)
    (box :class "weather-info-side" :orientation "v" :halign "center" :space-evenly "false" 
      (box :class "temp-info" :orientation "h" :halign "center" :space-evenly "false" 
        (box :class "temperature-side" temp)
        (box :class "thermometer" ""))
      (box :class "weather-stat-side" :halign "center" stat)
      (box :class "weather-quote" :halign "center" quote)
    )
  )
)
(defwidget system-info [] 
  (box :orientation "v" :space-evenly "true" :class "sliders-side border-box" 
    (box :orientation "h" :class "slider-cpu-side" :space-evenly "false" :halign "center"
      (box :class "label-cpu-side" "")
      (scale :min 0 :active "false" :max 100 :value {EWW_CPU.avg}))
    (box :orientation "h" :class "slider-ram-side" :space-evenly "false" :halign "center"
      (box :class "label-ram-side" "")
      (scale :min 0 :active "false" :max 100 :value {EWW_RAM.used_mem_perc}))
    (box :orientation "h" :class "slider-hdd-side" :space-evenly "false" :halign "center"
      (box :class "label-hdd-side" "")
      (scale :min 0 :max 100 :active "false" :value {EWW_DISK["/"].used_perc})
    )
  )
)
(defwidget vol-bright [mute-status cur-vol cur-bright] 
  (box :orientation "vertical" :space-evenly "true" :class "sliders-side border-box"
    (box :orientation "horizontal" :class "slider-vol-side" :space-evenly "false" :halign "center"
      (button :class "label-vol-side" :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle" mute-status)
      (scale :min 0 :active "true" :max 100 :value cur-vol :onchange "pactl set-sink-volume @DEFAULT_SINK {}%")
    )
    (box :orientation "h" :class "slider-bright-side" :space-evenly "false" :halign "center"
      (box :class "label-bright-side" "")
      (scale :min 0 :max 100 :active "true" :value cur-bright :onchange "xbacklight -set {}")
    )
  )
)
(defwidget vol [mute-status cur-vol] 
  (box :orientation "v" :space-evenly "true" :class "vol" 
    (box :class "vol-icon" mute-status)
    (scale :min 0 :max 100 :active "false" :value cur-vol)
  )
)
(defwidget bright [cur-bright] 
  (box :orientation "v" :space-evenly "true" :class "bright" 
    (box :class "bright-icon" "")
    (scale :min 0 :max 100 :active "false" :value cur-bright)
  )
)


;;  ██     ██ ██ ███    ██ ██████   ██████  ██     ██ ███████ 
;;  ██     ██ ██ ████   ██ ██   ██ ██    ██ ██     ██ ██      
;;  ██  █  ██ ██ ██ ██  ██ ██   ██ ██    ██ ██  █  ██ ███████ 
;;  ██ ███ ██ ██ ██  ██ ██ ██   ██ ██    ██ ██ ███ ██      ██ 
;;   ███ ███  ██ ██   ████ ██████   ██████   ███ ███  ███████

(defwindow sidebar 
      :geometry (geometry :height "1056px" :y "16px" :anchor "center left")     
    (box :class "sidebar_box" :orientation "v" :space-evenly "false" 
      (player :art {music-art} :title {music-title} :album {music-album} :artist {music-artist} :music-status {musicstat})
      (weather :icon {weather-data.icon} :icon_color {weather-data.color} :temp {weather-data.temp} :stat {weather-data.description} :quote {weather-data.quote})
      (vol-bright :mute-status {mutestat} :cur-vol {current-vol} :cur-bright {current-bright})
      (system-info)
      (cal :month {current-month} :year {current-year} :day {current-day})))
(defwindow vol 
      :geometry (geometry :height "16%" :y "25%" :anchor "center")
              (vol :mute-status {mutestat} :cur-vol {current-vol}))
(defwindow bright 
      :geometry (geometry :height "16%" :y "25%" :anchor "center")
              (bright :cur-bright {current-bright}))

(defwindow calendar
      :wm-ignore: true
      :windowtype "dock"
      :geometry (geometry :x "8px" :y "40px" :width "340px" :height "260px" :anchor "top right")
              (cal :month {current-month} :year {current-year} :day {current-day})
)
